Some notes on the workings of EASEtranslator.
( Read the HowToGuide first, for some background )

Note: the Visual Studio project for this is tooldev/EXPtran/Devtran
- the executable from DEVtran/x64/Debug is renamed when copied to tools.

An EAS-E project may be composed of more than one XML file - for size or re-use reasons.
[ For reasons lost in history, each XML file is referred to as a 'schema' internally. ]

The translator reads all the files in the project, constructing the 'PREAMBLE-like' definitions.
It then proceeds to translate the procedures which will execute in the context of these.
Again, there is uniform visibility, regardless of where an entity definition originated.

[ Note: The EAS-E translator code was hand-developed in XML without use of the GUI (EASEdevelop). 
It defines local variables directly in XML - this preceded the addition of syntax for such. ]

Lexical analysis and parsing:
Procedural source code lines are passed to ANALYZE ( a routine in Parser.xml ).
( observing line boundaries is important: see the PRINT ..LINES THUS statement of EAS-E )
In ANALYZE a line is converted to TOKENs, using the 14 x 7 matrix [current working, next character type].
Tokens are filed in a list - STMT - (the compiler does not use sets: they did not exist at its inception).
A single STMT may span line boundaries. STMTS are filed in a list owned by an instance of EASEPROC.

The syntax of EAS-E is defined by a set of rules - currently, syntaxrules.txt.
Each rule starts with a keyword - the dictionary keeps a list of possible rules which match each keyword.
These rules define sequences of mandatory <>, optional () statement parts that may repeat - denoted by *.
Within either mandatory or optional rule parts there may be alternatives.
Alternatives within a rule part - and more than one rule for a keyword - imply possible mismatches.
Mismatches are handled by backtracking: resetting the parse position and trying alternative matches.
Three functions (MATCHRULE_F, MATCHRULEPART_F, MATCHPARTALT_F) match the token stream to rules.
Unless marked with &, each rule part is represented by a NODE; these are 'structured' into a parse tree.
Structuring means that a matched rule part, if not a single token, may be a sub-tree of NODE entities.
Note: all parse tree data is saved in the NODE entities; backtracking merely discards nodes matched in error.
Certain syntax rules carry a initial code [1 - 5] used by CTLARRAY to manage iteration control phrase usage.

Scripting:
Some parsed statements are rendered into one or more simpler EAS-E statements: this is termed scripting.
Scripting uses script rules - currently, scriptrules.txt - to inject new tokens directly into the token list.
Some rule parts are 'decorated' with codes; this is information guiding the scripting or code generation.

Code generation:
When all procedures have been parsed, code generation traverses the parse trees, emitting C code.
Each 'schema' file produces one header file and one source file.

Miscellaneous:
At this time, the compiler does very little deletion of dynamically created entity instances.
Because of this, when running in Debug, it takes a long time to shut down.

The attribute-based realization of the SET concept is replaced by a SET-entity realization.
However, the SET attributes are synthesized to conform to the familiar SIMSCRIPT usage.

The array-based implementation of PERMANENT entities (inherited from FORTRAN?) is not supported.
It is possible to declare arrays of REFERENCE variables and populate their elements with entity instances.
The GUI appears to support definition of COMPOUND entities, but there is no underlying support.

There is (currently) a limit of 2-dimensional arrays.
