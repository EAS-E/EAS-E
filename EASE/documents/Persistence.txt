Persistence in EAS-E

The example EASEAPP2 (in VS, easeApp2) demonstrates the basics of persistence as implemented in this effort.
Persistence means that specified entity and set instance data may endure beyond an application's execution.
The entity type information and instance data is preserved by a server application, local or remote.
Persistent instance data is available to any client that uses the same entity definition data.

Persistent entity data is accessed through a level of indirection - an iRef (instance reference) structure.
Persistent entity instance data is saved by a server application which can be local or remote.
An iRef may hold the address of an in-memory instance - it also holds data needed to retrieve an instance.
An application can choose to 'commit' its instances at any time - generally, before it terminates.
When this happens, entity data is streamed to the server using mapping information built by the translator.
The server allocates data space in a file and associates this with instance identification data.

When a client connects to the server, it 'registers' each of its persistent types with the server.
The server may already know these types; at startup it reads its type registry of known persistent types.
Also, at startup, it reads index information about instances that already have been persisted.
A client type registering for the first time is allocated a persistent id and is added to the type registry.
Otherwise, the server merely confirms to the client that the entity type is known.
When a new client instance is to be created, the server is asked to allocate instance identification (iRef) data.
When instances are committed (RECORD statement) their streamed content is written to the server's data file.

Any subsequent application execution can pass iRef data to the server and the instance data will be returned.
EAS-E provides I/O format specifications, WRITE/READ AS P, so the client can locally save/retrieve iRef data.

The server provided here is a simple single-threaded model with no data locking or versioning.
The emphasis of this effort was to explore the code generation and mechanisms to support seamless access.

Running the example.
The server is ConsoleApplication1 in /tooldev; it must be executing - output "THE SERVER IS RUNNING..".

The VS project easeApp2 creads a file, hostdata.txt, at startup and connects to the server.
A single line specifies the serverIP address: n.n.n.n or the name "localhost" (without quotes).

The example application attempts to open a file, localdata.txt, in order to retrieve a saved iRef.
If the file does not exist, the application will populate an entity data structure and commit the data.
It writes a localdata.txt file with the iRef data for the persistent set, INBUFFER, and terminates.

If the example is then rerun, it will read the INBUFFER iRef data from the localdata.txt file.
In this case, the application does not re-create the entities, rather it traverses the saved content.
As the application traverses the set and explores its member data, instances are seamlessly retrieved.

The server can be shut down and restarted between executions of client applications.

Persistent data is stored in three files: 
ptypes.txt - registry data about the known types
pblks.txt - block allocation data for each persisted instance.
pdata.txt - the instance data written in allocated blocks.
These files can be deleted to re-initialise the demonstration scenario.

Implementation note:
The data file block allocation logic of the server application is sourced in EAS-E.
The socket communications utilty fuctions are developed in C routines.
At this time, the server uses local data files for persistent storage.
Again, the emphasis of this effort was to explore the client-side code generation.




